// algorthm v_count_mf
g_registry->add(MAKE_KEY_CL_0("v_count_mf",INT), std::make_shared<Algo_v_count_mf_cl<T_INT>>());
g_registry->add(MAKE_KEY_CL_0("v_count_mf",UINT), std::make_shared<Algo_v_count_mf_cl<T_UINT>>());
g_registry->add(MAKE_KEY_CL_0("v_count_mf",FLOAT), std::make_shared<Algo_v_count_mf_cl<T_FLOAT>>());


// algorthm v_reduce
for (const auto& op0:{PLUS_INT,MINUS_INT,MULT_INT,DIV_INT,FIRST_INT,SECOND_INT,ONE_INT,MIN_INT,MAX_INT}) {g_registry->add(MAKE_KEY_CL_1("v_reduce",op0), std::make_shared<Algo_v_reduce_cl<T_INT>>());
}for (const auto& op0:{PLUS_UINT,MINUS_UINT,MULT_UINT,DIV_UINT,FIRST_UINT,SECOND_UINT,ONE_UINT,MIN_UINT,MAX_UINT}) {g_registry->add(MAKE_KEY_CL_1("v_reduce",op0), std::make_shared<Algo_v_reduce_cl<T_UINT>>());
}for (const auto& op0:{PLUS_FLOAT,MINUS_FLOAT,MULT_FLOAT,DIV_FLOAT,FIRST_FLOAT,SECOND_FLOAT,ONE_FLOAT,MIN_FLOAT,MAX_FLOAT}) {g_registry->add(MAKE_KEY_CL_1("v_reduce",op0), std::make_shared<Algo_v_reduce_cl<T_FLOAT>>());
}for (const auto& op0:{BOR_INT,BAND_INT,BXOR_INT}) {g_registry->add(MAKE_KEY_CL_1("v_reduce",op0), std::make_shared<Algo_v_reduce_cl<T_INT>>());
}for (const auto& op0:{BOR_UINT,BAND_UINT,BXOR_UINT}) {g_registry->add(MAKE_KEY_CL_1("v_reduce",op0), std::make_shared<Algo_v_reduce_cl<T_UINT>>());
}

// algorthm v_eadd_fdb
for (const auto& op0:{PLUS_INT,MINUS_INT,MULT_INT,DIV_INT,FIRST_INT,SECOND_INT,ONE_INT,MIN_INT,MAX_INT}) {g_registry->add(MAKE_KEY_CL_1("v_eadd_fdb",op0), std::make_shared<Algo_v_eadd_fdb_cl<T_INT>>());
}for (const auto& op0:{PLUS_UINT,MINUS_UINT,MULT_UINT,DIV_UINT,FIRST_UINT,SECOND_UINT,ONE_UINT,MIN_UINT,MAX_UINT}) {g_registry->add(MAKE_KEY_CL_1("v_eadd_fdb",op0), std::make_shared<Algo_v_eadd_fdb_cl<T_UINT>>());
}for (const auto& op0:{PLUS_FLOAT,MINUS_FLOAT,MULT_FLOAT,DIV_FLOAT,FIRST_FLOAT,SECOND_FLOAT,ONE_FLOAT,MIN_FLOAT,MAX_FLOAT}) {g_registry->add(MAKE_KEY_CL_1("v_eadd_fdb",op0), std::make_shared<Algo_v_eadd_fdb_cl<T_FLOAT>>());
}for (const auto& op0:{BOR_INT,BAND_INT,BXOR_INT}) {g_registry->add(MAKE_KEY_CL_1("v_eadd_fdb",op0), std::make_shared<Algo_v_eadd_fdb_cl<T_INT>>());
}for (const auto& op0:{BOR_UINT,BAND_UINT,BXOR_UINT}) {g_registry->add(MAKE_KEY_CL_1("v_eadd_fdb",op0), std::make_shared<Algo_v_eadd_fdb_cl<T_UINT>>());
}

// algorthm v_assign_masked
for (const auto& op0:{PLUS_INT,MINUS_INT,MULT_INT,DIV_INT,FIRST_INT,SECOND_INT,ONE_INT,MIN_INT,MAX_INT}) {for (const auto& op1:{EQZERO_INT,NQZERO_INT,GTZERO_INT,GEZERO_INT,LTZERO_INT,LEZERO_INT,ALWAYS_INT,NEVER_INT}) {g_registry->add(MAKE_KEY_CL_2("v_assign_masked",op0,op1), std::make_shared<Algo_v_assign_masked_cl<T_INT>>());
}}for (const auto& op0:{PLUS_UINT,MINUS_UINT,MULT_UINT,DIV_UINT,FIRST_UINT,SECOND_UINT,ONE_UINT,MIN_UINT,MAX_UINT}) {for (const auto& op1:{EQZERO_UINT,NQZERO_UINT,GTZERO_UINT,GEZERO_UINT,LTZERO_UINT,LEZERO_UINT,ALWAYS_UINT,NEVER_UINT}) {g_registry->add(MAKE_KEY_CL_2("v_assign_masked",op0,op1), std::make_shared<Algo_v_assign_masked_cl<T_UINT>>());
}}for (const auto& op0:{PLUS_FLOAT,MINUS_FLOAT,MULT_FLOAT,DIV_FLOAT,FIRST_FLOAT,SECOND_FLOAT,ONE_FLOAT,MIN_FLOAT,MAX_FLOAT}) {for (const auto& op1:{EQZERO_FLOAT,NQZERO_FLOAT,GTZERO_FLOAT,GEZERO_FLOAT,LTZERO_FLOAT,LEZERO_FLOAT,ALWAYS_FLOAT,NEVER_FLOAT}) {g_registry->add(MAKE_KEY_CL_2("v_assign_masked",op0,op1), std::make_shared<Algo_v_assign_masked_cl<T_FLOAT>>());
}}for (const auto& op0:{BOR_INT,BAND_INT,BXOR_INT}) {for (const auto& op1:{EQZERO_INT,NQZERO_INT,GTZERO_INT,GEZERO_INT,LTZERO_INT,LEZERO_INT,ALWAYS_INT,NEVER_INT}) {g_registry->add(MAKE_KEY_CL_2("v_assign_masked",op0,op1), std::make_shared<Algo_v_assign_masked_cl<T_INT>>());
}}for (const auto& op0:{BOR_UINT,BAND_UINT,BXOR_UINT}) {for (const auto& op1:{EQZERO_UINT,NQZERO_UINT,GTZERO_UINT,GEZERO_UINT,LTZERO_UINT,LEZERO_UINT,ALWAYS_UINT,NEVER_UINT}) {g_registry->add(MAKE_KEY_CL_2("v_assign_masked",op0,op1), std::make_shared<Algo_v_assign_masked_cl<T_UINT>>());
}}

// algorthm mxv_masked
for (const auto& op0:{PLUS_INT,MINUS_INT,MULT_INT,DIV_INT,FIRST_INT,SECOND_INT,ONE_INT,MIN_INT,MAX_INT}) {for (const auto& op1:{PLUS_INT,MINUS_INT,MULT_INT,DIV_INT,FIRST_INT,SECOND_INT,ONE_INT,MIN_INT,MAX_INT}) {for (const auto& op2:{EQZERO_INT,NQZERO_INT,GTZERO_INT,GEZERO_INT,LTZERO_INT,LEZERO_INT,ALWAYS_INT,NEVER_INT}) {g_registry->add(MAKE_KEY_CL_3("mxv_masked",op0,op1,op2), std::make_shared<Algo_mxv_masked_cl<T_INT>>());
}}}for (const auto& op0:{PLUS_UINT,MINUS_UINT,MULT_UINT,DIV_UINT,FIRST_UINT,SECOND_UINT,ONE_UINT,MIN_UINT,MAX_UINT}) {for (const auto& op1:{PLUS_UINT,MINUS_UINT,MULT_UINT,DIV_UINT,FIRST_UINT,SECOND_UINT,ONE_UINT,MIN_UINT,MAX_UINT}) {for (const auto& op2:{EQZERO_UINT,NQZERO_UINT,GTZERO_UINT,GEZERO_UINT,LTZERO_UINT,LEZERO_UINT,ALWAYS_UINT,NEVER_UINT}) {g_registry->add(MAKE_KEY_CL_3("mxv_masked",op0,op1,op2), std::make_shared<Algo_mxv_masked_cl<T_UINT>>());
}}}for (const auto& op0:{PLUS_FLOAT,MINUS_FLOAT,MULT_FLOAT,DIV_FLOAT,FIRST_FLOAT,SECOND_FLOAT,ONE_FLOAT,MIN_FLOAT,MAX_FLOAT}) {for (const auto& op1:{PLUS_FLOAT,MINUS_FLOAT,MULT_FLOAT,DIV_FLOAT,FIRST_FLOAT,SECOND_FLOAT,ONE_FLOAT,MIN_FLOAT,MAX_FLOAT}) {for (const auto& op2:{EQZERO_FLOAT,NQZERO_FLOAT,GTZERO_FLOAT,GEZERO_FLOAT,LTZERO_FLOAT,LEZERO_FLOAT,ALWAYS_FLOAT,NEVER_FLOAT}) {g_registry->add(MAKE_KEY_CL_3("mxv_masked",op0,op1,op2), std::make_shared<Algo_mxv_masked_cl<T_FLOAT>>());
}}}for (const auto& op0:{BOR_INT,BAND_INT,BXOR_INT}) {for (const auto& op1:{BOR_INT,BAND_INT,BXOR_INT}) {for (const auto& op2:{EQZERO_INT,NQZERO_INT,GTZERO_INT,GEZERO_INT,LTZERO_INT,LEZERO_INT,ALWAYS_INT,NEVER_INT}) {g_registry->add(MAKE_KEY_CL_3("mxv_masked",op0,op1,op2), std::make_shared<Algo_mxv_masked_cl<T_INT>>());
}}}for (const auto& op0:{BOR_UINT,BAND_UINT,BXOR_UINT}) {for (const auto& op1:{BOR_UINT,BAND_UINT,BXOR_UINT}) {for (const auto& op2:{EQZERO_UINT,NQZERO_UINT,GTZERO_UINT,GEZERO_UINT,LTZERO_UINT,LEZERO_UINT,ALWAYS_UINT,NEVER_UINT}) {g_registry->add(MAKE_KEY_CL_3("mxv_masked",op0,op1,op2), std::make_shared<Algo_mxv_masked_cl<T_UINT>>());
}}}

// algorthm vxm_masked
for (const auto& op0:{PLUS_INT,MINUS_INT,MULT_INT,DIV_INT,FIRST_INT,SECOND_INT,ONE_INT,MIN_INT,MAX_INT}) {for (const auto& op1:{PLUS_INT,MINUS_INT,MULT_INT,DIV_INT,FIRST_INT,SECOND_INT,ONE_INT,MIN_INT,MAX_INT}) {for (const auto& op2:{EQZERO_INT,NQZERO_INT,GTZERO_INT,GEZERO_INT,LTZERO_INT,LEZERO_INT,ALWAYS_INT,NEVER_INT}) {g_registry->add(MAKE_KEY_CL_3("vxm_masked",op0,op1,op2), std::make_shared<Algo_vxm_masked_cl<T_INT>>());
}}}for (const auto& op0:{PLUS_UINT,MINUS_UINT,MULT_UINT,DIV_UINT,FIRST_UINT,SECOND_UINT,ONE_UINT,MIN_UINT,MAX_UINT}) {for (const auto& op1:{PLUS_UINT,MINUS_UINT,MULT_UINT,DIV_UINT,FIRST_UINT,SECOND_UINT,ONE_UINT,MIN_UINT,MAX_UINT}) {for (const auto& op2:{EQZERO_UINT,NQZERO_UINT,GTZERO_UINT,GEZERO_UINT,LTZERO_UINT,LEZERO_UINT,ALWAYS_UINT,NEVER_UINT}) {g_registry->add(MAKE_KEY_CL_3("vxm_masked",op0,op1,op2), std::make_shared<Algo_vxm_masked_cl<T_UINT>>());
}}}for (const auto& op0:{PLUS_FLOAT,MINUS_FLOAT,MULT_FLOAT,DIV_FLOAT,FIRST_FLOAT,SECOND_FLOAT,ONE_FLOAT,MIN_FLOAT,MAX_FLOAT}) {for (const auto& op1:{PLUS_FLOAT,MINUS_FLOAT,MULT_FLOAT,DIV_FLOAT,FIRST_FLOAT,SECOND_FLOAT,ONE_FLOAT,MIN_FLOAT,MAX_FLOAT}) {for (const auto& op2:{EQZERO_FLOAT,NQZERO_FLOAT,GTZERO_FLOAT,GEZERO_FLOAT,LTZERO_FLOAT,LEZERO_FLOAT,ALWAYS_FLOAT,NEVER_FLOAT}) {g_registry->add(MAKE_KEY_CL_3("vxm_masked",op0,op1,op2), std::make_shared<Algo_vxm_masked_cl<T_FLOAT>>());
}}}for (const auto& op0:{BOR_INT,BAND_INT,BXOR_INT}) {for (const auto& op1:{BOR_INT,BAND_INT,BXOR_INT}) {for (const auto& op2:{EQZERO_INT,NQZERO_INT,GTZERO_INT,GEZERO_INT,LTZERO_INT,LEZERO_INT,ALWAYS_INT,NEVER_INT}) {g_registry->add(MAKE_KEY_CL_3("vxm_masked",op0,op1,op2), std::make_shared<Algo_vxm_masked_cl<T_INT>>());
}}}for (const auto& op0:{BOR_UINT,BAND_UINT,BXOR_UINT}) {for (const auto& op1:{BOR_UINT,BAND_UINT,BXOR_UINT}) {for (const auto& op2:{EQZERO_UINT,NQZERO_UINT,GTZERO_UINT,GEZERO_UINT,LTZERO_UINT,LEZERO_UINT,ALWAYS_UINT,NEVER_UINT}) {g_registry->add(MAKE_KEY_CL_3("vxm_masked",op0,op1,op2), std::make_shared<Algo_vxm_masked_cl<T_UINT>>());
}}}

